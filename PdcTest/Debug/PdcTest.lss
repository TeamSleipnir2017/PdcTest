
PdcTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c28  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  00080c28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000090  20070558  00081180  00020558  2**2
                  ALLOC
  3 .stack        00002000  200705e8  00081210  00020558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020558  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020581  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007718  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001480  00000000  00000000  00027cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003422  00000000  00000000  00029172  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007c8  00000000  00000000  0002c594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000718  00000000  00000000  0002cd5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000161a7  00000000  00000000  0002d474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000091f9  00000000  00000000  0004361b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062501  00000000  00000000  0004c814  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001138  00000000  00000000  000aed18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725e8 	.word	0x200725e8
   80004:	000807b5 	.word	0x000807b5
   80008:	000807b1 	.word	0x000807b1
   8000c:	000807b1 	.word	0x000807b1
   80010:	000807b1 	.word	0x000807b1
   80014:	000807b1 	.word	0x000807b1
   80018:	000807b1 	.word	0x000807b1
	...
   8002c:	000807b1 	.word	0x000807b1
   80030:	000807b1 	.word	0x000807b1
   80034:	00000000 	.word	0x00000000
   80038:	000807b1 	.word	0x000807b1
   8003c:	000807b1 	.word	0x000807b1
   80040:	000807b1 	.word	0x000807b1
   80044:	000807b1 	.word	0x000807b1
   80048:	000807b1 	.word	0x000807b1
   8004c:	000807b1 	.word	0x000807b1
   80050:	000807b1 	.word	0x000807b1
   80054:	000807b1 	.word	0x000807b1
   80058:	000807b1 	.word	0x000807b1
   8005c:	000807b1 	.word	0x000807b1
   80060:	000807b1 	.word	0x000807b1
   80064:	000807b1 	.word	0x000807b1
   80068:	00000000 	.word	0x00000000
   8006c:	00080621 	.word	0x00080621
   80070:	00080635 	.word	0x00080635
   80074:	00080649 	.word	0x00080649
   80078:	0008065d 	.word	0x0008065d
	...
   80084:	000807b1 	.word	0x000807b1
   80088:	000807b1 	.word	0x000807b1
   8008c:	000807b1 	.word	0x000807b1
   80090:	000807b1 	.word	0x000807b1
   80094:	000807b1 	.word	0x000807b1
   80098:	000807b1 	.word	0x000807b1
   8009c:	000807b1 	.word	0x000807b1
   800a0:	000807b1 	.word	0x000807b1
   800a4:	00000000 	.word	0x00000000
   800a8:	000807b1 	.word	0x000807b1
   800ac:	000807b1 	.word	0x000807b1
   800b0:	000807b1 	.word	0x000807b1
   800b4:	000807b1 	.word	0x000807b1
   800b8:	000807b1 	.word	0x000807b1
   800bc:	000807b1 	.word	0x000807b1
   800c0:	000807b1 	.word	0x000807b1
   800c4:	000807b1 	.word	0x000807b1
   800c8:	000807b1 	.word	0x000807b1
   800cc:	000807b1 	.word	0x000807b1
   800d0:	000807b1 	.word	0x000807b1
   800d4:	000807b1 	.word	0x000807b1
   800d8:	000807b1 	.word	0x000807b1
   800dc:	000807b1 	.word	0x000807b1
   800e0:	000807b1 	.word	0x000807b1
   800e4:	000807b1 	.word	0x000807b1
   800e8:	000807b1 	.word	0x000807b1
   800ec:	000807b1 	.word	0x000807b1
   800f0:	000807b1 	.word	0x000807b1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	00080c28 	.word	0x00080c28

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	2007055c 	.word	0x2007055c
   80144:	00080c28 	.word	0x00080c28
   80148:	00080c28 	.word	0x00080c28
   8014c:	00000000 	.word	0x00000000

00080150 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   80150:	460b      	mov	r3, r1
   80152:	b119      	cbz	r1, 8015c <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   80154:	6809      	ldr	r1, [r1, #0]
   80156:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   80158:	685b      	ldr	r3, [r3, #4]
   8015a:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
   8015c:	b11a      	cbz	r2, 80166 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   8015e:	6813      	ldr	r3, [r2, #0]
   80160:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   80162:	6853      	ldr	r3, [r2, #4]
   80164:	61c3      	str	r3, [r0, #28]
   80166:	4770      	bx	lr

00080168 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   80168:	460b      	mov	r3, r1
   8016a:	b119      	cbz	r1, 80174 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   8016c:	6809      	ldr	r1, [r1, #0]
   8016e:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80170:	685b      	ldr	r3, [r3, #4]
   80172:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
   80174:	b11a      	cbz	r2, 8017e <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8017a:	6853      	ldr	r3, [r2, #4]
   8017c:	6143      	str	r3, [r0, #20]
   8017e:	4770      	bx	lr

00080180 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80180:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
   80184:	05c9      	lsls	r1, r1, #23
   80186:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
   80188:	6201      	str	r1, [r0, #32]
   8018a:	4770      	bx	lr

0008018c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8018c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8018e:	010c      	lsls	r4, r1, #4
   80190:	4294      	cmp	r4, r2
   80192:	d90f      	bls.n	801b4 <usart_set_async_baudrate+0x28>
   80194:	e01a      	b.n	801cc <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80196:	6841      	ldr	r1, [r0, #4]
   80198:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8019c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8019e:	0412      	lsls	r2, r2, #16
   801a0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   801a4:	431a      	orrs	r2, r3
   801a6:	6202      	str	r2, [r0, #32]

	return 0;
   801a8:	2000      	movs	r0, #0
   801aa:	e01c      	b.n	801e6 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   801ac:	2001      	movs	r0, #1
   801ae:	e01a      	b.n	801e6 <usart_set_async_baudrate+0x5a>
   801b0:	2001      	movs	r0, #1
   801b2:	e018      	b.n	801e6 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   801b4:	0863      	lsrs	r3, r4, #1
   801b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   801ba:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
   801be:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   801c0:	1e5c      	subs	r4, r3, #1
   801c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   801c6:	428c      	cmp	r4, r1
   801c8:	d9e9      	bls.n	8019e <usart_set_async_baudrate+0x12>
   801ca:	e7ef      	b.n	801ac <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   801cc:	00c9      	lsls	r1, r1, #3
   801ce:	084b      	lsrs	r3, r1, #1
   801d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   801d4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   801d8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   801da:	1e5c      	subs	r4, r3, #1
   801dc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   801e0:	428c      	cmp	r4, r1
   801e2:	d8e5      	bhi.n	801b0 <usart_set_async_baudrate+0x24>
   801e4:	e7d7      	b.n	80196 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   801e6:	bc10      	pop	{r4}
   801e8:	4770      	bx	lr
   801ea:	bf00      	nop

000801ec <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   801ec:	4b08      	ldr	r3, [pc, #32]	; (80210 <usart_reset+0x24>)
   801ee:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   801f2:	2300      	movs	r3, #0
   801f4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   801f6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   801f8:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   801fa:	2388      	movs	r3, #136	; 0x88
   801fc:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   801fe:	2324      	movs	r3, #36	; 0x24
   80200:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   80202:	f44f 7380 	mov.w	r3, #256	; 0x100
   80206:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   80208:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   8020c:	6003      	str	r3, [r0, #0]
   8020e:	4770      	bx	lr
   80210:	55534100 	.word	0x55534100

00080214 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80214:	b570      	push	{r4, r5, r6, lr}
   80216:	4605      	mov	r5, r0
   80218:	460c      	mov	r4, r1
   8021a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8021c:	4b0f      	ldr	r3, [pc, #60]	; (8025c <usart_init_rs232+0x48>)
   8021e:	4798      	blx	r3

	ul_reg_val = 0;
   80220:	2200      	movs	r2, #0
   80222:	4b0f      	ldr	r3, [pc, #60]	; (80260 <usart_init_rs232+0x4c>)
   80224:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   80226:	b19c      	cbz	r4, 80250 <usart_init_rs232+0x3c>
   80228:	4632      	mov	r2, r6
   8022a:	6821      	ldr	r1, [r4, #0]
   8022c:	4628      	mov	r0, r5
   8022e:	4b0d      	ldr	r3, [pc, #52]	; (80264 <usart_init_rs232+0x50>)
   80230:	4798      	blx	r3
   80232:	4602      	mov	r2, r0
   80234:	b970      	cbnz	r0, 80254 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80236:	6861      	ldr	r1, [r4, #4]
   80238:	68a3      	ldr	r3, [r4, #8]
   8023a:	4319      	orrs	r1, r3
   8023c:	6923      	ldr	r3, [r4, #16]
   8023e:	4319      	orrs	r1, r3
   80240:	68e3      	ldr	r3, [r4, #12]
   80242:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80244:	4906      	ldr	r1, [pc, #24]	; (80260 <usart_init_rs232+0x4c>)
   80246:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   80248:	6869      	ldr	r1, [r5, #4]
   8024a:	430b      	orrs	r3, r1
   8024c:	606b      	str	r3, [r5, #4]

	return 0;
   8024e:	e002      	b.n	80256 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   80250:	2201      	movs	r2, #1
   80252:	e000      	b.n	80256 <usart_init_rs232+0x42>
   80254:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   80256:	4610      	mov	r0, r2
   80258:	bd70      	pop	{r4, r5, r6, pc}
   8025a:	bf00      	nop
   8025c:	000801ed 	.word	0x000801ed
   80260:	20070574 	.word	0x20070574
   80264:	0008018d 	.word	0x0008018d

00080268 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   80268:	2340      	movs	r3, #64	; 0x40
   8026a:	6003      	str	r3, [r0, #0]
   8026c:	4770      	bx	lr
   8026e:	bf00      	nop

00080270 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   80270:	2310      	movs	r3, #16
   80272:	6003      	str	r3, [r0, #0]
   80274:	4770      	bx	lr
   80276:	bf00      	nop

00080278 <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80278:	6943      	ldr	r3, [r0, #20]
   8027a:	f013 0f02 	tst.w	r3, #2
   8027e:	d0fb      	beq.n	80278 <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80280:	f3c1 0108 	ubfx	r1, r1, #0, #9
   80284:	61c1      	str	r1, [r0, #28]

	return 0;
}
   80286:	2000      	movs	r0, #0
   80288:	4770      	bx	lr
   8028a:	bf00      	nop

0008028c <usart_get_pdc_base>:
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
   8028c:	4b0c      	ldr	r3, [pc, #48]	; (802c0 <usart_get_pdc_base+0x34>)
   8028e:	4298      	cmp	r0, r3
   80290:	d00f      	beq.n	802b2 <usart_get_pdc_base+0x26>
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
   80292:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   80296:	4298      	cmp	r0, r3
   80298:	d00d      	beq.n	802b6 <usart_get_pdc_base+0x2a>
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
   8029a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   8029e:	4298      	cmp	r0, r3
   802a0:	d00b      	beq.n	802ba <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
   802a2:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
   802a6:	4a07      	ldr	r2, [pc, #28]	; (802c4 <usart_get_pdc_base+0x38>)
   802a8:	4290      	cmp	r0, r2
   802aa:	bf0c      	ite	eq
   802ac:	4618      	moveq	r0, r3
   802ae:	2000      	movne	r0, #0
   802b0:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
   802b2:	4805      	ldr	r0, [pc, #20]	; (802c8 <usart_get_pdc_base+0x3c>)
   802b4:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
		p_pdc_base = PDC_USART1;
		return p_pdc_base;
   802b6:	4805      	ldr	r0, [pc, #20]	; (802cc <usart_get_pdc_base+0x40>)
   802b8:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
		p_pdc_base = PDC_USART2;
		return p_pdc_base;
   802ba:	4805      	ldr	r0, [pc, #20]	; (802d0 <usart_get_pdc_base+0x44>)
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
}
   802bc:	4770      	bx	lr
   802be:	bf00      	nop
   802c0:	40098000 	.word	0x40098000
   802c4:	400a4000 	.word	0x400a4000
   802c8:	40098100 	.word	0x40098100
   802cc:	4009c100 	.word	0x4009c100
   802d0:	400a0100 	.word	0x400a0100

000802d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   802d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   802d6:	480e      	ldr	r0, [pc, #56]	; (80310 <sysclk_init+0x3c>)
   802d8:	4b0e      	ldr	r3, [pc, #56]	; (80314 <sysclk_init+0x40>)
   802da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   802dc:	213e      	movs	r1, #62	; 0x3e
   802de:	2000      	movs	r0, #0
   802e0:	4b0d      	ldr	r3, [pc, #52]	; (80318 <sysclk_init+0x44>)
   802e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   802e4:	4c0d      	ldr	r4, [pc, #52]	; (8031c <sysclk_init+0x48>)
   802e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   802e8:	2800      	cmp	r0, #0
   802ea:	d0fc      	beq.n	802e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   802ec:	4b0c      	ldr	r3, [pc, #48]	; (80320 <sysclk_init+0x4c>)
   802ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   802f0:	4a0c      	ldr	r2, [pc, #48]	; (80324 <sysclk_init+0x50>)
   802f2:	4b0d      	ldr	r3, [pc, #52]	; (80328 <sysclk_init+0x54>)
   802f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   802f6:	4c0d      	ldr	r4, [pc, #52]	; (8032c <sysclk_init+0x58>)
   802f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   802fa:	2800      	cmp	r0, #0
   802fc:	d0fc      	beq.n	802f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   802fe:	2010      	movs	r0, #16
   80300:	4b0b      	ldr	r3, [pc, #44]	; (80330 <sysclk_init+0x5c>)
   80302:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80304:	4b0b      	ldr	r3, [pc, #44]	; (80334 <sysclk_init+0x60>)
   80306:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80308:	4801      	ldr	r0, [pc, #4]	; (80310 <sysclk_init+0x3c>)
   8030a:	4b02      	ldr	r3, [pc, #8]	; (80314 <sysclk_init+0x40>)
   8030c:	4798      	blx	r3
   8030e:	bd10      	pop	{r4, pc}
   80310:	0501bd00 	.word	0x0501bd00
   80314:	200700a5 	.word	0x200700a5
   80318:	000806d9 	.word	0x000806d9
   8031c:	0008072d 	.word	0x0008072d
   80320:	0008073d 	.word	0x0008073d
   80324:	200d3f01 	.word	0x200d3f01
   80328:	400e0600 	.word	0x400e0600
   8032c:	0008074d 	.word	0x0008074d
   80330:	00080671 	.word	0x00080671
   80334:	00080861 	.word	0x00080861

00080338 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80338:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8033a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8033e:	4b16      	ldr	r3, [pc, #88]	; (80398 <board_init+0x60>)
   80340:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80342:	200b      	movs	r0, #11
   80344:	4c15      	ldr	r4, [pc, #84]	; (8039c <board_init+0x64>)
   80346:	47a0      	blx	r4
   80348:	200c      	movs	r0, #12
   8034a:	47a0      	blx	r4
   8034c:	200d      	movs	r0, #13
   8034e:	47a0      	blx	r4
   80350:	200e      	movs	r0, #14
   80352:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80354:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80358:	203b      	movs	r0, #59	; 0x3b
   8035a:	4c11      	ldr	r4, [pc, #68]	; (803a0 <board_init+0x68>)
   8035c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8035e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80362:	2055      	movs	r0, #85	; 0x55
   80364:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80366:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8036a:	2056      	movs	r0, #86	; 0x56
   8036c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8036e:	490d      	ldr	r1, [pc, #52]	; (803a4 <board_init+0x6c>)
   80370:	2068      	movs	r0, #104	; 0x68
   80372:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80374:	490c      	ldr	r1, [pc, #48]	; (803a8 <board_init+0x70>)
   80376:	205c      	movs	r0, #92	; 0x5c
   80378:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8037a:	4a0c      	ldr	r2, [pc, #48]	; (803ac <board_init+0x74>)
   8037c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80380:	480b      	ldr	r0, [pc, #44]	; (803b0 <board_init+0x78>)
   80382:	4b0c      	ldr	r3, [pc, #48]	; (803b4 <board_init+0x7c>)
   80384:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80386:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8038a:	202b      	movs	r0, #43	; 0x2b
   8038c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8038e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80392:	202a      	movs	r0, #42	; 0x2a
   80394:	47a0      	blx	r4
   80396:	bd10      	pop	{r4, pc}
   80398:	400e1a50 	.word	0x400e1a50
   8039c:	0008075d 	.word	0x0008075d
   803a0:	0008045d 	.word	0x0008045d
   803a4:	28000079 	.word	0x28000079
   803a8:	28000001 	.word	0x28000001
   803ac:	08000001 	.word	0x08000001
   803b0:	400e0e00 	.word	0x400e0e00
   803b4:	00080531 	.word	0x00080531

000803b8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   803b8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   803ba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   803be:	d016      	beq.n	803ee <pio_set_peripheral+0x36>
   803c0:	d804      	bhi.n	803cc <pio_set_peripheral+0x14>
   803c2:	b1c1      	cbz	r1, 803f6 <pio_set_peripheral+0x3e>
   803c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   803c8:	d00a      	beq.n	803e0 <pio_set_peripheral+0x28>
   803ca:	e013      	b.n	803f4 <pio_set_peripheral+0x3c>
   803cc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   803d0:	d011      	beq.n	803f6 <pio_set_peripheral+0x3e>
   803d2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   803d6:	d00e      	beq.n	803f6 <pio_set_peripheral+0x3e>
   803d8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   803dc:	d10a      	bne.n	803f4 <pio_set_peripheral+0x3c>
   803de:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   803e0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   803e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
   803e4:	400b      	ands	r3, r1
   803e6:	ea23 0302 	bic.w	r3, r3, r2
   803ea:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   803ec:	e002      	b.n	803f4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   803ee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   803f0:	4313      	orrs	r3, r2
   803f2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   803f4:	6042      	str	r2, [r0, #4]
   803f6:	4770      	bx	lr

000803f8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803f8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803fa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   803fe:	bf14      	ite	ne
   80400:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80402:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80404:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80408:	bf14      	ite	ne
   8040a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8040c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8040e:	f012 0f02 	tst.w	r2, #2
   80412:	d002      	beq.n	8041a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80414:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80418:	e004      	b.n	80424 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8041a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8041e:	bf18      	it	ne
   80420:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80424:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80426:	6001      	str	r1, [r0, #0]
   80428:	4770      	bx	lr
   8042a:	bf00      	nop

0008042c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8042c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8042e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80430:	9c01      	ldr	r4, [sp, #4]
   80432:	b10c      	cbz	r4, 80438 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80434:	6641      	str	r1, [r0, #100]	; 0x64
   80436:	e000      	b.n	8043a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80438:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8043a:	b10b      	cbz	r3, 80440 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8043c:	6501      	str	r1, [r0, #80]	; 0x50
   8043e:	e000      	b.n	80442 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80440:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80442:	b10a      	cbz	r2, 80448 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80444:	6301      	str	r1, [r0, #48]	; 0x30
   80446:	e000      	b.n	8044a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80448:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8044a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8044c:	6001      	str	r1, [r0, #0]
}
   8044e:	bc10      	pop	{r4}
   80450:	4770      	bx	lr
   80452:	bf00      	nop

00080454 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80454:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80456:	4770      	bx	lr

00080458 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80458:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8045a:	4770      	bx	lr

0008045c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8045c:	b570      	push	{r4, r5, r6, lr}
   8045e:	b082      	sub	sp, #8
   80460:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80462:	0943      	lsrs	r3, r0, #5
   80464:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80468:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8046c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8046e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80472:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80476:	d030      	beq.n	804da <pio_configure_pin+0x7e>
   80478:	d806      	bhi.n	80488 <pio_configure_pin+0x2c>
   8047a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8047e:	d00a      	beq.n	80496 <pio_configure_pin+0x3a>
   80480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80484:	d018      	beq.n	804b8 <pio_configure_pin+0x5c>
   80486:	e049      	b.n	8051c <pio_configure_pin+0xc0>
   80488:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8048c:	d030      	beq.n	804f0 <pio_configure_pin+0x94>
   8048e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80492:	d02d      	beq.n	804f0 <pio_configure_pin+0x94>
   80494:	e042      	b.n	8051c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80496:	f000 001f 	and.w	r0, r0, #31
   8049a:	2601      	movs	r6, #1
   8049c:	4086      	lsls	r6, r0
   8049e:	4632      	mov	r2, r6
   804a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804a4:	4620      	mov	r0, r4
   804a6:	4b1f      	ldr	r3, [pc, #124]	; (80524 <pio_configure_pin+0xc8>)
   804a8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804aa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804ae:	bf14      	ite	ne
   804b0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804b2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   804b4:	2001      	movs	r0, #1
   804b6:	e032      	b.n	8051e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   804b8:	f000 001f 	and.w	r0, r0, #31
   804bc:	2601      	movs	r6, #1
   804be:	4086      	lsls	r6, r0
   804c0:	4632      	mov	r2, r6
   804c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804c6:	4620      	mov	r0, r4
   804c8:	4b16      	ldr	r3, [pc, #88]	; (80524 <pio_configure_pin+0xc8>)
   804ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804d0:	bf14      	ite	ne
   804d2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804d4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   804d6:	2001      	movs	r0, #1
   804d8:	e021      	b.n	8051e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   804da:	f000 011f 	and.w	r1, r0, #31
   804de:	2601      	movs	r6, #1
   804e0:	462a      	mov	r2, r5
   804e2:	fa06 f101 	lsl.w	r1, r6, r1
   804e6:	4620      	mov	r0, r4
   804e8:	4b0f      	ldr	r3, [pc, #60]	; (80528 <pio_configure_pin+0xcc>)
   804ea:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   804ec:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   804ee:	e016      	b.n	8051e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804f0:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   804f4:	f000 011f 	and.w	r1, r0, #31
   804f8:	2601      	movs	r6, #1
   804fa:	ea05 0306 	and.w	r3, r5, r6
   804fe:	9300      	str	r3, [sp, #0]
   80500:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80504:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80508:	bf14      	ite	ne
   8050a:	2200      	movne	r2, #0
   8050c:	2201      	moveq	r2, #1
   8050e:	fa06 f101 	lsl.w	r1, r6, r1
   80512:	4620      	mov	r0, r4
   80514:	4c05      	ldr	r4, [pc, #20]	; (8052c <pio_configure_pin+0xd0>)
   80516:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80518:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8051a:	e000      	b.n	8051e <pio_configure_pin+0xc2>

	default:
		return 0;
   8051c:	2000      	movs	r0, #0
	}

	return 1;
}
   8051e:	b002      	add	sp, #8
   80520:	bd70      	pop	{r4, r5, r6, pc}
   80522:	bf00      	nop
   80524:	000803b9 	.word	0x000803b9
   80528:	000803f9 	.word	0x000803f9
   8052c:	0008042d 	.word	0x0008042d

00080530 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80530:	b570      	push	{r4, r5, r6, lr}
   80532:	b082      	sub	sp, #8
   80534:	4605      	mov	r5, r0
   80536:	460e      	mov	r6, r1
   80538:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8053a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8053e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80542:	d026      	beq.n	80592 <pio_configure_pin_group+0x62>
   80544:	d806      	bhi.n	80554 <pio_configure_pin_group+0x24>
   80546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8054a:	d00a      	beq.n	80562 <pio_configure_pin_group+0x32>
   8054c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80550:	d013      	beq.n	8057a <pio_configure_pin_group+0x4a>
   80552:	e034      	b.n	805be <pio_configure_pin_group+0x8e>
   80554:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80558:	d01f      	beq.n	8059a <pio_configure_pin_group+0x6a>
   8055a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8055e:	d01c      	beq.n	8059a <pio_configure_pin_group+0x6a>
   80560:	e02d      	b.n	805be <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80562:	460a      	mov	r2, r1
   80564:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80568:	4b16      	ldr	r3, [pc, #88]	; (805c4 <pio_configure_pin_group+0x94>)
   8056a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8056c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80570:	bf14      	ite	ne
   80572:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80574:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80576:	2001      	movs	r0, #1
   80578:	e022      	b.n	805c0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8057a:	460a      	mov	r2, r1
   8057c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80580:	4b10      	ldr	r3, [pc, #64]	; (805c4 <pio_configure_pin_group+0x94>)
   80582:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80584:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80588:	bf14      	ite	ne
   8058a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8058c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8058e:	2001      	movs	r0, #1
   80590:	e016      	b.n	805c0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80592:	4b0d      	ldr	r3, [pc, #52]	; (805c8 <pio_configure_pin_group+0x98>)
   80594:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80596:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80598:	e012      	b.n	805c0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8059a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   8059e:	f004 0301 	and.w	r3, r4, #1
   805a2:	9300      	str	r3, [sp, #0]
   805a4:	f3c4 0380 	ubfx	r3, r4, #2, #1
   805a8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   805ac:	bf14      	ite	ne
   805ae:	2200      	movne	r2, #0
   805b0:	2201      	moveq	r2, #1
   805b2:	4631      	mov	r1, r6
   805b4:	4628      	mov	r0, r5
   805b6:	4c05      	ldr	r4, [pc, #20]	; (805cc <pio_configure_pin_group+0x9c>)
   805b8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   805ba:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   805bc:	e000      	b.n	805c0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   805be:	2000      	movs	r0, #0
	}

	return 1;
}
   805c0:	b002      	add	sp, #8
   805c2:	bd70      	pop	{r4, r5, r6, pc}
   805c4:	000803b9 	.word	0x000803b9
   805c8:	000803f9 	.word	0x000803f9
   805cc:	0008042d 	.word	0x0008042d

000805d0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   805d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805d4:	4604      	mov	r4, r0
   805d6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   805d8:	4b0e      	ldr	r3, [pc, #56]	; (80614 <pio_handler_process+0x44>)
   805da:	4798      	blx	r3
   805dc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   805de:	4620      	mov	r0, r4
   805e0:	4b0d      	ldr	r3, [pc, #52]	; (80618 <pio_handler_process+0x48>)
   805e2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   805e4:	4005      	ands	r5, r0
   805e6:	d013      	beq.n	80610 <pio_handler_process+0x40>
   805e8:	4c0c      	ldr	r4, [pc, #48]	; (8061c <pio_handler_process+0x4c>)
   805ea:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   805ee:	6823      	ldr	r3, [r4, #0]
   805f0:	4543      	cmp	r3, r8
   805f2:	d108      	bne.n	80606 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   805f4:	6861      	ldr	r1, [r4, #4]
   805f6:	4229      	tst	r1, r5
   805f8:	d005      	beq.n	80606 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   805fa:	68e3      	ldr	r3, [r4, #12]
   805fc:	4640      	mov	r0, r8
   805fe:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80600:	6863      	ldr	r3, [r4, #4]
   80602:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80606:	42b4      	cmp	r4, r6
   80608:	d002      	beq.n	80610 <pio_handler_process+0x40>
   8060a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8060c:	2d00      	cmp	r5, #0
   8060e:	d1ee      	bne.n	805ee <pio_handler_process+0x1e>
   80610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80614:	00080455 	.word	0x00080455
   80618:	00080459 	.word	0x00080459
   8061c:	20070578 	.word	0x20070578

00080620 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80620:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80622:	210b      	movs	r1, #11
   80624:	4801      	ldr	r0, [pc, #4]	; (8062c <PIOA_Handler+0xc>)
   80626:	4b02      	ldr	r3, [pc, #8]	; (80630 <PIOA_Handler+0x10>)
   80628:	4798      	blx	r3
   8062a:	bd08      	pop	{r3, pc}
   8062c:	400e0e00 	.word	0x400e0e00
   80630:	000805d1 	.word	0x000805d1

00080634 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80634:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80636:	210c      	movs	r1, #12
   80638:	4801      	ldr	r0, [pc, #4]	; (80640 <PIOB_Handler+0xc>)
   8063a:	4b02      	ldr	r3, [pc, #8]	; (80644 <PIOB_Handler+0x10>)
   8063c:	4798      	blx	r3
   8063e:	bd08      	pop	{r3, pc}
   80640:	400e1000 	.word	0x400e1000
   80644:	000805d1 	.word	0x000805d1

00080648 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80648:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8064a:	210d      	movs	r1, #13
   8064c:	4801      	ldr	r0, [pc, #4]	; (80654 <PIOC_Handler+0xc>)
   8064e:	4b02      	ldr	r3, [pc, #8]	; (80658 <PIOC_Handler+0x10>)
   80650:	4798      	blx	r3
   80652:	bd08      	pop	{r3, pc}
   80654:	400e1200 	.word	0x400e1200
   80658:	000805d1 	.word	0x000805d1

0008065c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8065c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8065e:	210e      	movs	r1, #14
   80660:	4801      	ldr	r0, [pc, #4]	; (80668 <PIOD_Handler+0xc>)
   80662:	4b02      	ldr	r3, [pc, #8]	; (8066c <PIOD_Handler+0x10>)
   80664:	4798      	blx	r3
   80666:	bd08      	pop	{r3, pc}
   80668:	400e1400 	.word	0x400e1400
   8066c:	000805d1 	.word	0x000805d1

00080670 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80670:	4a18      	ldr	r2, [pc, #96]	; (806d4 <pmc_switch_mck_to_pllack+0x64>)
   80672:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80678:	4318      	orrs	r0, r3
   8067a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8067c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8067e:	f013 0f08 	tst.w	r3, #8
   80682:	d003      	beq.n	8068c <pmc_switch_mck_to_pllack+0x1c>
   80684:	e009      	b.n	8069a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80686:	3b01      	subs	r3, #1
   80688:	d103      	bne.n	80692 <pmc_switch_mck_to_pllack+0x22>
   8068a:	e01e      	b.n	806ca <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8068c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80690:	4910      	ldr	r1, [pc, #64]	; (806d4 <pmc_switch_mck_to_pllack+0x64>)
   80692:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80694:	f012 0f08 	tst.w	r2, #8
   80698:	d0f5      	beq.n	80686 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8069a:	4a0e      	ldr	r2, [pc, #56]	; (806d4 <pmc_switch_mck_to_pllack+0x64>)
   8069c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8069e:	f023 0303 	bic.w	r3, r3, #3
   806a2:	f043 0302 	orr.w	r3, r3, #2
   806a6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806a8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   806aa:	f010 0008 	ands.w	r0, r0, #8
   806ae:	d004      	beq.n	806ba <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   806b0:	2000      	movs	r0, #0
   806b2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   806b4:	3b01      	subs	r3, #1
   806b6:	d103      	bne.n	806c0 <pmc_switch_mck_to_pllack+0x50>
   806b8:	e009      	b.n	806ce <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806be:	4905      	ldr	r1, [pc, #20]	; (806d4 <pmc_switch_mck_to_pllack+0x64>)
   806c0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   806c2:	f012 0f08 	tst.w	r2, #8
   806c6:	d0f5      	beq.n	806b4 <pmc_switch_mck_to_pllack+0x44>
   806c8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   806ca:	2001      	movs	r0, #1
   806cc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   806ce:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   806d0:	4770      	bx	lr
   806d2:	bf00      	nop
   806d4:	400e0600 	.word	0x400e0600

000806d8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   806d8:	b138      	cbz	r0, 806ea <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   806da:	4911      	ldr	r1, [pc, #68]	; (80720 <pmc_switch_mainck_to_xtal+0x48>)
   806dc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   806de:	4a11      	ldr	r2, [pc, #68]	; (80724 <pmc_switch_mainck_to_xtal+0x4c>)
   806e0:	401a      	ands	r2, r3
   806e2:	4b11      	ldr	r3, [pc, #68]	; (80728 <pmc_switch_mainck_to_xtal+0x50>)
   806e4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   806e6:	620b      	str	r3, [r1, #32]
   806e8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806ea:	480d      	ldr	r0, [pc, #52]	; (80720 <pmc_switch_mainck_to_xtal+0x48>)
   806ec:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806ee:	0209      	lsls	r1, r1, #8
   806f0:	b289      	uxth	r1, r1
   806f2:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   806f6:	f023 0303 	bic.w	r3, r3, #3
   806fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   806fe:	f043 0301 	orr.w	r3, r3, #1
   80702:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80704:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80706:	4602      	mov	r2, r0
   80708:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8070a:	f013 0f01 	tst.w	r3, #1
   8070e:	d0fb      	beq.n	80708 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80710:	4a03      	ldr	r2, [pc, #12]	; (80720 <pmc_switch_mainck_to_xtal+0x48>)
   80712:	6a13      	ldr	r3, [r2, #32]
   80714:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8071c:	6213      	str	r3, [r2, #32]
   8071e:	4770      	bx	lr
   80720:	400e0600 	.word	0x400e0600
   80724:	fec8fffc 	.word	0xfec8fffc
   80728:	01370002 	.word	0x01370002

0008072c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8072c:	4b02      	ldr	r3, [pc, #8]	; (80738 <pmc_osc_is_ready_mainck+0xc>)
   8072e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80730:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80734:	4770      	bx	lr
   80736:	bf00      	nop
   80738:	400e0600 	.word	0x400e0600

0008073c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8073c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80740:	4b01      	ldr	r3, [pc, #4]	; (80748 <pmc_disable_pllack+0xc>)
   80742:	629a      	str	r2, [r3, #40]	; 0x28
   80744:	4770      	bx	lr
   80746:	bf00      	nop
   80748:	400e0600 	.word	0x400e0600

0008074c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8074c:	4b02      	ldr	r3, [pc, #8]	; (80758 <pmc_is_locked_pllack+0xc>)
   8074e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80750:	f000 0002 	and.w	r0, r0, #2
   80754:	4770      	bx	lr
   80756:	bf00      	nop
   80758:	400e0600 	.word	0x400e0600

0008075c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8075c:	282c      	cmp	r0, #44	; 0x2c
   8075e:	d81e      	bhi.n	8079e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80760:	281f      	cmp	r0, #31
   80762:	d80c      	bhi.n	8077e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80764:	4b11      	ldr	r3, [pc, #68]	; (807ac <pmc_enable_periph_clk+0x50>)
   80766:	699a      	ldr	r2, [r3, #24]
   80768:	2301      	movs	r3, #1
   8076a:	4083      	lsls	r3, r0
   8076c:	4393      	bics	r3, r2
   8076e:	d018      	beq.n	807a2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80770:	2301      	movs	r3, #1
   80772:	fa03 f000 	lsl.w	r0, r3, r0
   80776:	4b0d      	ldr	r3, [pc, #52]	; (807ac <pmc_enable_periph_clk+0x50>)
   80778:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8077a:	2000      	movs	r0, #0
   8077c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8077e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80780:	4b0a      	ldr	r3, [pc, #40]	; (807ac <pmc_enable_periph_clk+0x50>)
   80782:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80786:	2301      	movs	r3, #1
   80788:	4083      	lsls	r3, r0
   8078a:	4393      	bics	r3, r2
   8078c:	d00b      	beq.n	807a6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8078e:	2301      	movs	r3, #1
   80790:	fa03 f000 	lsl.w	r0, r3, r0
   80794:	4b05      	ldr	r3, [pc, #20]	; (807ac <pmc_enable_periph_clk+0x50>)
   80796:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8079a:	2000      	movs	r0, #0
   8079c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8079e:	2001      	movs	r0, #1
   807a0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   807a2:	2000      	movs	r0, #0
   807a4:	4770      	bx	lr
   807a6:	2000      	movs	r0, #0
}
   807a8:	4770      	bx	lr
   807aa:	bf00      	nop
   807ac:	400e0600 	.word	0x400e0600

000807b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   807b0:	e7fe      	b.n	807b0 <Dummy_Handler>
   807b2:	bf00      	nop

000807b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   807b4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   807b6:	4b1e      	ldr	r3, [pc, #120]	; (80830 <Reset_Handler+0x7c>)
   807b8:	4a1e      	ldr	r2, [pc, #120]	; (80834 <Reset_Handler+0x80>)
   807ba:	429a      	cmp	r2, r3
   807bc:	d003      	beq.n	807c6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   807be:	4b1e      	ldr	r3, [pc, #120]	; (80838 <Reset_Handler+0x84>)
   807c0:	4a1b      	ldr	r2, [pc, #108]	; (80830 <Reset_Handler+0x7c>)
   807c2:	429a      	cmp	r2, r3
   807c4:	d304      	bcc.n	807d0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807c6:	4b1d      	ldr	r3, [pc, #116]	; (8083c <Reset_Handler+0x88>)
   807c8:	4a1d      	ldr	r2, [pc, #116]	; (80840 <Reset_Handler+0x8c>)
   807ca:	429a      	cmp	r2, r3
   807cc:	d30f      	bcc.n	807ee <Reset_Handler+0x3a>
   807ce:	e01a      	b.n	80806 <Reset_Handler+0x52>
   807d0:	4917      	ldr	r1, [pc, #92]	; (80830 <Reset_Handler+0x7c>)
   807d2:	4b1c      	ldr	r3, [pc, #112]	; (80844 <Reset_Handler+0x90>)
   807d4:	1a5b      	subs	r3, r3, r1
   807d6:	f023 0303 	bic.w	r3, r3, #3
   807da:	3304      	adds	r3, #4
   807dc:	4a15      	ldr	r2, [pc, #84]	; (80834 <Reset_Handler+0x80>)
   807de:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   807e0:	f852 0b04 	ldr.w	r0, [r2], #4
   807e4:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   807e8:	429a      	cmp	r2, r3
   807ea:	d1f9      	bne.n	807e0 <Reset_Handler+0x2c>
   807ec:	e7eb      	b.n	807c6 <Reset_Handler+0x12>
   807ee:	4b16      	ldr	r3, [pc, #88]	; (80848 <Reset_Handler+0x94>)
   807f0:	4a16      	ldr	r2, [pc, #88]	; (8084c <Reset_Handler+0x98>)
   807f2:	1ad2      	subs	r2, r2, r3
   807f4:	f022 0203 	bic.w	r2, r2, #3
   807f8:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807fa:	3b04      	subs	r3, #4
		*pDest++ = 0;
   807fc:	2100      	movs	r1, #0
   807fe:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80802:	4293      	cmp	r3, r2
   80804:	d1fb      	bne.n	807fe <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80806:	4b12      	ldr	r3, [pc, #72]	; (80850 <Reset_Handler+0x9c>)
   80808:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8080c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80810:	4910      	ldr	r1, [pc, #64]	; (80854 <Reset_Handler+0xa0>)
   80812:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80814:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8081c:	d203      	bcs.n	80826 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8081e:	688b      	ldr	r3, [r1, #8]
   80820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80824:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80826:	4b0c      	ldr	r3, [pc, #48]	; (80858 <Reset_Handler+0xa4>)
   80828:	4798      	blx	r3

	/* Branch to main function */
	main();
   8082a:	4b0c      	ldr	r3, [pc, #48]	; (8085c <Reset_Handler+0xa8>)
   8082c:	4798      	blx	r3
   8082e:	e7fe      	b.n	8082e <Reset_Handler+0x7a>
   80830:	20070000 	.word	0x20070000
   80834:	00080c28 	.word	0x00080c28
   80838:	20070558 	.word	0x20070558
   8083c:	200705e8 	.word	0x200705e8
   80840:	20070558 	.word	0x20070558
   80844:	20070557 	.word	0x20070557
   80848:	2007055c 	.word	0x2007055c
   8084c:	200705eb 	.word	0x200705eb
   80850:	00080000 	.word	0x00080000
   80854:	e000ed00 	.word	0xe000ed00
   80858:	00080aa1 	.word	0x00080aa1
   8085c:	00080999 	.word	0x00080999

00080860 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80860:	4b3e      	ldr	r3, [pc, #248]	; (8095c <SystemCoreClockUpdate+0xfc>)
   80862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80864:	f003 0303 	and.w	r3, r3, #3
   80868:	2b03      	cmp	r3, #3
   8086a:	d85f      	bhi.n	8092c <SystemCoreClockUpdate+0xcc>
   8086c:	e8df f003 	tbb	[pc, r3]
   80870:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80874:	4b3a      	ldr	r3, [pc, #232]	; (80960 <SystemCoreClockUpdate+0x100>)
   80876:	695b      	ldr	r3, [r3, #20]
   80878:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8087c:	bf14      	ite	ne
   8087e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80882:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80886:	4b37      	ldr	r3, [pc, #220]	; (80964 <SystemCoreClockUpdate+0x104>)
   80888:	601a      	str	r2, [r3, #0]
   8088a:	e04f      	b.n	8092c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8088c:	4b33      	ldr	r3, [pc, #204]	; (8095c <SystemCoreClockUpdate+0xfc>)
   8088e:	6a1b      	ldr	r3, [r3, #32]
   80890:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80894:	d003      	beq.n	8089e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80896:	4a34      	ldr	r2, [pc, #208]	; (80968 <SystemCoreClockUpdate+0x108>)
   80898:	4b32      	ldr	r3, [pc, #200]	; (80964 <SystemCoreClockUpdate+0x104>)
   8089a:	601a      	str	r2, [r3, #0]
   8089c:	e046      	b.n	8092c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8089e:	4a33      	ldr	r2, [pc, #204]	; (8096c <SystemCoreClockUpdate+0x10c>)
   808a0:	4b30      	ldr	r3, [pc, #192]	; (80964 <SystemCoreClockUpdate+0x104>)
   808a2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   808a4:	4b2d      	ldr	r3, [pc, #180]	; (8095c <SystemCoreClockUpdate+0xfc>)
   808a6:	6a1b      	ldr	r3, [r3, #32]
   808a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808ac:	2b10      	cmp	r3, #16
   808ae:	d002      	beq.n	808b6 <SystemCoreClockUpdate+0x56>
   808b0:	2b20      	cmp	r3, #32
   808b2:	d004      	beq.n	808be <SystemCoreClockUpdate+0x5e>
   808b4:	e03a      	b.n	8092c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   808b6:	4a2e      	ldr	r2, [pc, #184]	; (80970 <SystemCoreClockUpdate+0x110>)
   808b8:	4b2a      	ldr	r3, [pc, #168]	; (80964 <SystemCoreClockUpdate+0x104>)
   808ba:	601a      	str	r2, [r3, #0]
				break;
   808bc:	e036      	b.n	8092c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   808be:	4a2a      	ldr	r2, [pc, #168]	; (80968 <SystemCoreClockUpdate+0x108>)
   808c0:	4b28      	ldr	r3, [pc, #160]	; (80964 <SystemCoreClockUpdate+0x104>)
   808c2:	601a      	str	r2, [r3, #0]
				break;
   808c4:	e032      	b.n	8092c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   808c6:	4b25      	ldr	r3, [pc, #148]	; (8095c <SystemCoreClockUpdate+0xfc>)
   808c8:	6a1b      	ldr	r3, [r3, #32]
   808ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   808ce:	d003      	beq.n	808d8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   808d0:	4a25      	ldr	r2, [pc, #148]	; (80968 <SystemCoreClockUpdate+0x108>)
   808d2:	4b24      	ldr	r3, [pc, #144]	; (80964 <SystemCoreClockUpdate+0x104>)
   808d4:	601a      	str	r2, [r3, #0]
   808d6:	e012      	b.n	808fe <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   808d8:	4a24      	ldr	r2, [pc, #144]	; (8096c <SystemCoreClockUpdate+0x10c>)
   808da:	4b22      	ldr	r3, [pc, #136]	; (80964 <SystemCoreClockUpdate+0x104>)
   808dc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   808de:	4b1f      	ldr	r3, [pc, #124]	; (8095c <SystemCoreClockUpdate+0xfc>)
   808e0:	6a1b      	ldr	r3, [r3, #32]
   808e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808e6:	2b10      	cmp	r3, #16
   808e8:	d002      	beq.n	808f0 <SystemCoreClockUpdate+0x90>
   808ea:	2b20      	cmp	r3, #32
   808ec:	d004      	beq.n	808f8 <SystemCoreClockUpdate+0x98>
   808ee:	e006      	b.n	808fe <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   808f0:	4a1f      	ldr	r2, [pc, #124]	; (80970 <SystemCoreClockUpdate+0x110>)
   808f2:	4b1c      	ldr	r3, [pc, #112]	; (80964 <SystemCoreClockUpdate+0x104>)
   808f4:	601a      	str	r2, [r3, #0]
				break;
   808f6:	e002      	b.n	808fe <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   808f8:	4a1b      	ldr	r2, [pc, #108]	; (80968 <SystemCoreClockUpdate+0x108>)
   808fa:	4b1a      	ldr	r3, [pc, #104]	; (80964 <SystemCoreClockUpdate+0x104>)
   808fc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   808fe:	4b17      	ldr	r3, [pc, #92]	; (8095c <SystemCoreClockUpdate+0xfc>)
   80900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80902:	f003 0303 	and.w	r3, r3, #3
   80906:	2b02      	cmp	r3, #2
   80908:	d10d      	bne.n	80926 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8090a:	4a14      	ldr	r2, [pc, #80]	; (8095c <SystemCoreClockUpdate+0xfc>)
   8090c:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8090e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80910:	4814      	ldr	r0, [pc, #80]	; (80964 <SystemCoreClockUpdate+0x104>)
   80912:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80916:	6803      	ldr	r3, [r0, #0]
   80918:	fb01 3303 	mla	r3, r1, r3, r3
   8091c:	b2d2      	uxtb	r2, r2
   8091e:	fbb3 f3f2 	udiv	r3, r3, r2
   80922:	6003      	str	r3, [r0, #0]
   80924:	e002      	b.n	8092c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80926:	4a13      	ldr	r2, [pc, #76]	; (80974 <SystemCoreClockUpdate+0x114>)
   80928:	4b0e      	ldr	r3, [pc, #56]	; (80964 <SystemCoreClockUpdate+0x104>)
   8092a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8092c:	4b0b      	ldr	r3, [pc, #44]	; (8095c <SystemCoreClockUpdate+0xfc>)
   8092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80930:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80934:	2b70      	cmp	r3, #112	; 0x70
   80936:	d107      	bne.n	80948 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80938:	4a0a      	ldr	r2, [pc, #40]	; (80964 <SystemCoreClockUpdate+0x104>)
   8093a:	6813      	ldr	r3, [r2, #0]
   8093c:	490e      	ldr	r1, [pc, #56]	; (80978 <SystemCoreClockUpdate+0x118>)
   8093e:	fba1 1303 	umull	r1, r3, r1, r3
   80942:	085b      	lsrs	r3, r3, #1
   80944:	6013      	str	r3, [r2, #0]
   80946:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80948:	4b04      	ldr	r3, [pc, #16]	; (8095c <SystemCoreClockUpdate+0xfc>)
   8094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8094c:	4905      	ldr	r1, [pc, #20]	; (80964 <SystemCoreClockUpdate+0x104>)
   8094e:	f3c3 1202 	ubfx	r2, r3, #4, #3
   80952:	680b      	ldr	r3, [r1, #0]
   80954:	40d3      	lsrs	r3, r2
   80956:	600b      	str	r3, [r1, #0]
   80958:	4770      	bx	lr
   8095a:	bf00      	nop
   8095c:	400e0600 	.word	0x400e0600
   80960:	400e1a10 	.word	0x400e1a10
   80964:	2007012c 	.word	0x2007012c
   80968:	00b71b00 	.word	0x00b71b00
   8096c:	003d0900 	.word	0x003d0900
   80970:	007a1200 	.word	0x007a1200
   80974:	0e4e1c00 	.word	0x0e4e1c00
   80978:	aaaaaaab 	.word	0xaaaaaaab

0008097c <waste_of_time_delay>:
#define USART_TXD0 PIO_PA11A_TXD0
#define USART_PERIPHERAL PIOA

void waste_of_time_delay(uint32_t delay)
{
	for (uint32_t i = 0; i < delay; i++)
   8097c:	4601      	mov	r1, r0
   8097e:	2200      	movs	r2, #0
   80980:	b938      	cbnz	r0, 80992 <waste_of_time_delay+0x16>
   80982:	4770      	bx	lr
	{
		for (uint32_t j = 0; j < 1978; j++)
		{
			__asm__("nop");
   80984:	bf00      	nop

void waste_of_time_delay(uint32_t delay)
{
	for (uint32_t i = 0; i < delay; i++)
	{
		for (uint32_t j = 0; j < 1978; j++)
   80986:	3b01      	subs	r3, #1
   80988:	d1fc      	bne.n	80984 <waste_of_time_delay+0x8>
#define USART_TXD0 PIO_PA11A_TXD0
#define USART_PERIPHERAL PIOA

void waste_of_time_delay(uint32_t delay)
{
	for (uint32_t i = 0; i < delay; i++)
   8098a:	3201      	adds	r2, #1
   8098c:	4291      	cmp	r1, r2
   8098e:	d100      	bne.n	80992 <waste_of_time_delay+0x16>
   80990:	4770      	bx	lr
#define USART_RXD0 PIO_PA10A_RXD0
#define USART_TXD0 PIO_PA11A_TXD0
#define USART_PERIPHERAL PIOA

void waste_of_time_delay(uint32_t delay)
{
   80992:	f240 73ba 	movw	r3, #1978	; 0x7ba
   80996:	e7f5      	b.n	80984 <waste_of_time_delay+0x8>

00080998 <main>:
		}
	}
}

int main (void)
{
   80998:	b5f0      	push	{r4, r5, r6, r7, lr}
   8099a:	b08d      	sub	sp, #52	; 0x34
	sysclk_init();
   8099c:	4b30      	ldr	r3, [pc, #192]	; (80a60 <main+0xc8>)
   8099e:	4798      	blx	r3

	board_init();
   809a0:	4b30      	ldr	r3, [pc, #192]	; (80a64 <main+0xcc>)
   809a2:	4798      	blx	r3
						
	USART_PERIPHERAL->PIO_IDR = USART_RXD0;		// Interrupt disable register
   809a4:	4b30      	ldr	r3, [pc, #192]	; (80a68 <main+0xd0>)
   809a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   809aa:	6459      	str	r1, [r3, #68]	; 0x44
	USART_PERIPHERAL->PIO_IDR = USART_TXD0;
   809ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   809b0:	645a      	str	r2, [r3, #68]	; 0x44
	USART_PERIPHERAL->PIO_PDR = USART_RXD0;		// Disable input/output which enables peripheral mode
   809b2:	6059      	str	r1, [r3, #4]
	USART_PERIPHERAL->PIO_PDR = USART_TXD0;
   809b4:	605a      	str	r2, [r3, #4]
	USART_PERIPHERAL->PIO_ABSR &= ~USART_RXD0;	// Enable Peripheral A (USART)
   809b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   809b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   809bc:	671a      	str	r2, [r3, #112]	; 0x70
	USART_PERIPHERAL->PIO_ABSR &= ~USART_TXD0;
   809be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   809c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   809c4:	671a      	str	r2, [r3, #112]	; 0x70

	const sam_usart_opt_t usart_console_settings = {
   809c6:	4e29      	ldr	r6, [pc, #164]	; (80a6c <main+0xd4>)
   809c8:	ac06      	add	r4, sp, #24
   809ca:	4635      	mov	r5, r6
   809cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   809ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   809d0:	e895 0003 	ldmia.w	r5, {r0, r1}
   809d4:	e884 0003 	stmia.w	r4, {r0, r1}
		.stop_bits = US_MR_NBSTOP_1_BIT,
		.channel_mode = US_MR_CHMODE_NORMAL,
		.irda_filter = 0
	};

	pmc_enable_periph_clk(ID_USART0);
   809d8:	2011      	movs	r0, #17
   809da:	4b25      	ldr	r3, [pc, #148]	; (80a70 <main+0xd8>)
   809dc:	4798      	blx	r3

	usart_init_rs232(USART0, &usart_console_settings, sysclk_get_cpu_hz());
   809de:	4c25      	ldr	r4, [pc, #148]	; (80a74 <main+0xdc>)
   809e0:	4a25      	ldr	r2, [pc, #148]	; (80a78 <main+0xe0>)
   809e2:	a906      	add	r1, sp, #24
   809e4:	4620      	mov	r0, r4
   809e6:	4b25      	ldr	r3, [pc, #148]	; (80a7c <main+0xe4>)
   809e8:	4798      	blx	r3
	usart_enable_rx(USART0);
   809ea:	4620      	mov	r0, r4
   809ec:	4b24      	ldr	r3, [pc, #144]	; (80a80 <main+0xe8>)
   809ee:	4798      	blx	r3
	usart_enable_tx(USART0);
   809f0:	4620      	mov	r0, r4
   809f2:	4b24      	ldr	r3, [pc, #144]	; (80a84 <main+0xec>)
   809f4:	4798      	blx	r3
// 	usart_putchar(USART0, 'a');
// 	usart_write_line(USART0, "Hello world");

	uint8_t send[4] = {'a', 'b', 'c', 'd'};
   809f6:	69b0      	ldr	r0, [r6, #24]
   809f8:	9005      	str	r0, [sp, #20]
	
	pdc_packet_t PdcPacket = {
   809fa:	ab05      	add	r3, sp, #20
   809fc:	9303      	str	r3, [sp, #12]
   809fe:	2304      	movs	r3, #4
   80a00:	9304      	str	r3, [sp, #16]
		.ul_addr = &send,
		.ul_size = 4
	};

	Pdc *PdcInterface = usart_get_pdc_base(USART0);
   80a02:	4620      	mov	r0, r4
   80a04:	4b20      	ldr	r3, [pc, #128]	; (80a88 <main+0xf0>)
   80a06:	4798      	blx	r3
   80a08:	4604      	mov	r4, r0

	pdc_tx_init(PdcInterface, &PdcPacket, NULL);
   80a0a:	2200      	movs	r2, #0
   80a0c:	a903      	add	r1, sp, #12
   80a0e:	4b1f      	ldr	r3, [pc, #124]	; (80a8c <main+0xf4>)
   80a10:	4798      	blx	r3
	pdc_enable_transfer(PdcInterface, PERIPH_PTCR_TXTEN);
   80a12:	f44f 7180 	mov.w	r1, #256	; 0x100
   80a16:	4620      	mov	r0, r4
   80a18:	4d1d      	ldr	r5, [pc, #116]	; (80a90 <main+0xf8>)
   80a1a:	47a8      	blx	r5

	uint8_t C[2] = {'a','b'};
   80a1c:	8bb3      	ldrh	r3, [r6, #28]
   80a1e:	f8ad 3008 	strh.w	r3, [sp, #8]

	pdc_packet_t PdcPacketRx = {
   80a22:	ab02      	add	r3, sp, #8
   80a24:	9300      	str	r3, [sp, #0]
   80a26:	2302      	movs	r3, #2
   80a28:	9301      	str	r3, [sp, #4]
		.ul_addr = &C,
		.ul_size = 2
	};

	pdc_rx_init(PdcInterface, &PdcPacketRx, NULL);
   80a2a:	2200      	movs	r2, #0
   80a2c:	4669      	mov	r1, sp
   80a2e:	4620      	mov	r0, r4
   80a30:	4b18      	ldr	r3, [pc, #96]	; (80a94 <main+0xfc>)
   80a32:	4798      	blx	r3
	pdc_enable_transfer(PdcInterface, PERIPH_PTCR_RXTEN);
   80a34:	2101      	movs	r1, #1
   80a36:	4620      	mov	r0, r4
   80a38:	47a8      	blx	r5


	while(1)
	{
		waste_of_time_delay(10000);
   80a3a:	f242 7710 	movw	r7, #10000	; 0x2710
   80a3e:	4e16      	ldr	r6, [pc, #88]	; (80a98 <main+0x100>)
		usart_putchar(USART0, C[0]);
   80a40:	4d0c      	ldr	r5, [pc, #48]	; (80a74 <main+0xdc>)
	pdc_enable_transfer(PdcInterface, PERIPH_PTCR_RXTEN);


	while(1)
	{
		waste_of_time_delay(10000);
   80a42:	4638      	mov	r0, r7
   80a44:	47b0      	blx	r6
		usart_putchar(USART0, C[0]);
   80a46:	f89d 1008 	ldrb.w	r1, [sp, #8]
   80a4a:	4628      	mov	r0, r5
   80a4c:	4c13      	ldr	r4, [pc, #76]	; (80a9c <main+0x104>)
   80a4e:	47a0      	blx	r4
		waste_of_time_delay(10000);
   80a50:	4638      	mov	r0, r7
   80a52:	47b0      	blx	r6
		usart_putchar(USART0, C[1]);
   80a54:	f89d 1009 	ldrb.w	r1, [sp, #9]
   80a58:	4628      	mov	r0, r5
   80a5a:	47a0      	blx	r4
   80a5c:	e7f1      	b.n	80a42 <main+0xaa>
   80a5e:	bf00      	nop
   80a60:	000802d5 	.word	0x000802d5
   80a64:	00080339 	.word	0x00080339
   80a68:	400e0e00 	.word	0x400e0e00
   80a6c:	00080bdc 	.word	0x00080bdc
   80a70:	0008075d 	.word	0x0008075d
   80a74:	40098000 	.word	0x40098000
   80a78:	0501bd00 	.word	0x0501bd00
   80a7c:	00080215 	.word	0x00080215
   80a80:	00080271 	.word	0x00080271
   80a84:	00080269 	.word	0x00080269
   80a88:	0008028d 	.word	0x0008028d
   80a8c:	00080151 	.word	0x00080151
   80a90:	00080181 	.word	0x00080181
   80a94:	00080169 	.word	0x00080169
   80a98:	0008097d 	.word	0x0008097d
   80a9c:	00080279 	.word	0x00080279

00080aa0 <__libc_init_array>:
   80aa0:	b570      	push	{r4, r5, r6, lr}
   80aa2:	4e0f      	ldr	r6, [pc, #60]	; (80ae0 <__libc_init_array+0x40>)
   80aa4:	4d0f      	ldr	r5, [pc, #60]	; (80ae4 <__libc_init_array+0x44>)
   80aa6:	1b76      	subs	r6, r6, r5
   80aa8:	10b6      	asrs	r6, r6, #2
   80aaa:	bf18      	it	ne
   80aac:	2400      	movne	r4, #0
   80aae:	d005      	beq.n	80abc <__libc_init_array+0x1c>
   80ab0:	3401      	adds	r4, #1
   80ab2:	f855 3b04 	ldr.w	r3, [r5], #4
   80ab6:	4798      	blx	r3
   80ab8:	42a6      	cmp	r6, r4
   80aba:	d1f9      	bne.n	80ab0 <__libc_init_array+0x10>
   80abc:	4e0a      	ldr	r6, [pc, #40]	; (80ae8 <__libc_init_array+0x48>)
   80abe:	4d0b      	ldr	r5, [pc, #44]	; (80aec <__libc_init_array+0x4c>)
   80ac0:	f000 f8a0 	bl	80c04 <_init>
   80ac4:	1b76      	subs	r6, r6, r5
   80ac6:	10b6      	asrs	r6, r6, #2
   80ac8:	bf18      	it	ne
   80aca:	2400      	movne	r4, #0
   80acc:	d006      	beq.n	80adc <__libc_init_array+0x3c>
   80ace:	3401      	adds	r4, #1
   80ad0:	f855 3b04 	ldr.w	r3, [r5], #4
   80ad4:	4798      	blx	r3
   80ad6:	42a6      	cmp	r6, r4
   80ad8:	d1f9      	bne.n	80ace <__libc_init_array+0x2e>
   80ada:	bd70      	pop	{r4, r5, r6, pc}
   80adc:	bd70      	pop	{r4, r5, r6, pc}
   80ade:	bf00      	nop
   80ae0:	00080c10 	.word	0x00080c10
   80ae4:	00080c10 	.word	0x00080c10
   80ae8:	00080c18 	.word	0x00080c18
   80aec:	00080c10 	.word	0x00080c10

00080af0 <register_fini>:
   80af0:	4b02      	ldr	r3, [pc, #8]	; (80afc <register_fini+0xc>)
   80af2:	b113      	cbz	r3, 80afa <register_fini+0xa>
   80af4:	4802      	ldr	r0, [pc, #8]	; (80b00 <register_fini+0x10>)
   80af6:	f000 b805 	b.w	80b04 <atexit>
   80afa:	4770      	bx	lr
   80afc:	00000000 	.word	0x00000000
   80b00:	00080b11 	.word	0x00080b11

00080b04 <atexit>:
   80b04:	2300      	movs	r3, #0
   80b06:	4601      	mov	r1, r0
   80b08:	461a      	mov	r2, r3
   80b0a:	4618      	mov	r0, r3
   80b0c:	f000 b814 	b.w	80b38 <__register_exitproc>

00080b10 <__libc_fini_array>:
   80b10:	b538      	push	{r3, r4, r5, lr}
   80b12:	4d07      	ldr	r5, [pc, #28]	; (80b30 <__libc_fini_array+0x20>)
   80b14:	4c07      	ldr	r4, [pc, #28]	; (80b34 <__libc_fini_array+0x24>)
   80b16:	1b2c      	subs	r4, r5, r4
   80b18:	10a4      	asrs	r4, r4, #2
   80b1a:	d005      	beq.n	80b28 <__libc_fini_array+0x18>
   80b1c:	3c01      	subs	r4, #1
   80b1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80b22:	4798      	blx	r3
   80b24:	2c00      	cmp	r4, #0
   80b26:	d1f9      	bne.n	80b1c <__libc_fini_array+0xc>
   80b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80b2c:	f000 b874 	b.w	80c18 <_fini>
   80b30:	00080c28 	.word	0x00080c28
   80b34:	00080c24 	.word	0x00080c24

00080b38 <__register_exitproc>:
   80b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80b3c:	4c25      	ldr	r4, [pc, #148]	; (80bd4 <__register_exitproc+0x9c>)
   80b3e:	4606      	mov	r6, r0
   80b40:	6825      	ldr	r5, [r4, #0]
   80b42:	4688      	mov	r8, r1
   80b44:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   80b48:	4692      	mov	sl, r2
   80b4a:	4699      	mov	r9, r3
   80b4c:	b3c4      	cbz	r4, 80bc0 <__register_exitproc+0x88>
   80b4e:	6860      	ldr	r0, [r4, #4]
   80b50:	281f      	cmp	r0, #31
   80b52:	dc17      	bgt.n	80b84 <__register_exitproc+0x4c>
   80b54:	1c41      	adds	r1, r0, #1
   80b56:	b176      	cbz	r6, 80b76 <__register_exitproc+0x3e>
   80b58:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   80b5c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   80b60:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   80b64:	2201      	movs	r2, #1
   80b66:	4082      	lsls	r2, r0
   80b68:	4315      	orrs	r5, r2
   80b6a:	2e02      	cmp	r6, #2
   80b6c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   80b70:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   80b74:	d01e      	beq.n	80bb4 <__register_exitproc+0x7c>
   80b76:	1c83      	adds	r3, r0, #2
   80b78:	6061      	str	r1, [r4, #4]
   80b7a:	2000      	movs	r0, #0
   80b7c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   80b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80b84:	4b14      	ldr	r3, [pc, #80]	; (80bd8 <__register_exitproc+0xa0>)
   80b86:	b303      	cbz	r3, 80bca <__register_exitproc+0x92>
   80b88:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80b8c:	f3af 8000 	nop.w
   80b90:	4604      	mov	r4, r0
   80b92:	b1d0      	cbz	r0, 80bca <__register_exitproc+0x92>
   80b94:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   80b98:	2700      	movs	r7, #0
   80b9a:	e884 0088 	stmia.w	r4, {r3, r7}
   80b9e:	4638      	mov	r0, r7
   80ba0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   80ba4:	2101      	movs	r1, #1
   80ba6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   80baa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   80bae:	2e00      	cmp	r6, #0
   80bb0:	d0e1      	beq.n	80b76 <__register_exitproc+0x3e>
   80bb2:	e7d1      	b.n	80b58 <__register_exitproc+0x20>
   80bb4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80bb8:	431a      	orrs	r2, r3
   80bba:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   80bbe:	e7da      	b.n	80b76 <__register_exitproc+0x3e>
   80bc0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   80bc4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   80bc8:	e7c1      	b.n	80b4e <__register_exitproc+0x16>
   80bca:	f04f 30ff 	mov.w	r0, #4294967295
   80bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80bd2:	bf00      	nop
   80bd4:	00080c00 	.word	0x00080c00
   80bd8:	00000000 	.word	0x00000000
   80bdc:	0001c200 	.word	0x0001c200
   80be0:	000000c0 	.word	0x000000c0
   80be4:	00000800 	.word	0x00000800
	...
   80bf4:	64636261 	.word	0x64636261
   80bf8:	00006261 	.word	0x00006261
   80bfc:	00000043 	.word	0x00000043

00080c00 <_global_impure_ptr>:
   80c00:	20070130                                0.. 

00080c04 <_init>:
   80c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c06:	bf00      	nop
   80c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c0a:	bc08      	pop	{r3}
   80c0c:	469e      	mov	lr, r3
   80c0e:	4770      	bx	lr

00080c10 <__init_array_start>:
   80c10:	00080af1 	.word	0x00080af1

00080c14 <__frame_dummy_init_array_entry>:
   80c14:	00080119                                ....

00080c18 <_fini>:
   80c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c1a:	bf00      	nop
   80c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c1e:	bc08      	pop	{r3}
   80c20:	469e      	mov	lr, r3
   80c22:	4770      	bx	lr

00080c24 <__fini_array_start>:
   80c24:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00080bfc 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
